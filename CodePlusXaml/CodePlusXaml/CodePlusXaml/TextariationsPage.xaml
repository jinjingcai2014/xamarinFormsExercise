<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="CodePlusXaml.TextariationsPage">
    <ContentPage.Padding>
        <OnPlatform x:TypeArguments="Thickness"
                    iOS="0,20,0,0"></OnPlatform>
    </ContentPage.Padding>
    <ScrollView>
        <StackLayout>
            <Label VerticalOptions="CenterAndExpand" TextColor="Red"
                   Text="Single lines of text are easy."/>
            <Label VerticalOptions="CenterAndExpand" TextColor="Red">
                <Label.Text>
                    Text can also be content of the Text Property.
                </Label.Text>
            </Label>
            <Label VerticalOptions="CenterAndExpand" TextColor="Green" FontSize="Large"
                   Text="Perhaps the best way to define a paragraph of
uniformly formatted text is by setting the Text
property as an attribute and left justifying
the block of text in the XAML file. End-of-line
characters are converted to a space character."/>
            <Label VerticalOptions="CenterAndExpand">
                <Label.FormattedText>
                    <FormattedString>
                        <Span Text="A single line with"/>
                        <Span Text=" bold " FontAttributes="Bold"/>
                        <Span Text=" and "/>
                        <Span Text="italic" FontAttributes="Italic"/>
                        <Span Text=" and "/>
                        <Span Text=" large " FontSize="Large"/>
                        <Span Text=" text."/>
                    </FormattedString>
                </Label.FormattedText>
            </Label>
            <Label BackgroundColor="Azure" FontSize="Medium" TextColor="Chocolate" 
                Text="Perhaps the best way to define a paragraph of
uniformly formatted text is by setting the Text
property as an attribute and left justifying
the block of text in the XAML file. End-of-line
characters are converted to a space character."/>
            <Label Text="If your line or paragraph of text requires some nonuniform paragraph formatting, you'll want to use
the FormattedText property of Label. As you might recall, you set this to a FormattedString object and then set multiple Span objects to the Spans collection of the FormattedString. In XAML,
you need property-element tags for Label.FormattedString, but Spans is the content property of
FormattedString"/>
            <Label FontSize="Large" TextColor="LightSteelBlue"
                Text="You'll notice in the screenshot that the text with the large font size is aligned with the regular text on
the baseline, which is the typographically proper approach, and the line spacing is adjusted to accommodate the larger text.
In most Xamarin.Forms programs, neither XAML nor code exist in isolation but work together. Elements in XAML can trigger events handled in code, and code can modify elements in XAML. In the
next chapter you'll see how this works."/>
        </StackLayout>
        
        </ScrollView>
</ContentPage>